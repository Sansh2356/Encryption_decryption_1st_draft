

End of encrypted value for :: the input text ==#include <iostream>
using namespace std;
#include <cmath>;
class node
{
public:
    int data;
    node *next;
    node(int f)
    {
        this->data = f;
        this->next = NULL;
    }
};
void insertathead(node *&head, int d)
{
    node *newnode = new node(d);
    newnode->next = head;
    head = newnode;
}
void insertatmid(node *&head, int f, int s)
{
    if (s == 1)
    {
        insertathead(head, f);
    }
    node *temp = head;
    int count = 0;
    while (count < s - 1)
    {
        temp = temp->next;
        count++;
    }
    node *newnode = new node(f);
    newnode->next = temp->next;
    temp->next = newnode;
}
void print(node *&head)
{
    node *temp = head;
    while (temp != NULL)
    {
        cout << temp->data << "  ";
        temp = temp->next;
    }
}
void reverse(node *&head,node*&tail)
{
    node *temp1 = head;
    node *temp2 = head;
    node *temp3 = NULL;
    while (temp1 != NULL)
    {
      
        temp2=temp1->next;
        temp1->next=temp3;
        temp3=temp1;
        temp1=temp2;
    }

    node *temp4 = temp3;
    while (temp4 != NULL)
    {
        cout << temp4->data <<"  ";
        temp4 = temp4->next;
    }
}
int main()
{
    node *node1 = new node(1);
    node *head = node1;
    node *tail = node1;
    insertathead(head, 2);
    insertathead(head, 3);
    insertathead(head, 4);
    insertathead(head, 5);
    print(head);
    cout<<endl;
    reverse(head,tail);
}



End of encrypted value for :: the input text ==#include<vector>
#include<iostream>
using namespace std;
#include<unordered_map>
class Solution {
public:
    vector<long long> distance(vector<int>& nums) 
    {
        int n = nums.size();
        vector<long long>ans(n);
        unordered_map<int, vector<int>>mp;
        for (int i = 0; i < n; i++) mp[nums[i]].push_back(i);
        for (auto it : mp)
        {
            int num = it.first;
            vector<int>& indexes = it.second;
            //======================================================
            long long totalSum = 0;
            for (int index : indexes) totalSum += (long long)index;
            
            long long preSum = 0;
            for (int i = 0; i < indexes.size(); i++)
            {
                int index = indexes[i];
                long long postSum = totalSum - preSum - index;
                
                ans[index] += (index * (long long)i);
                ans[index] -= (preSum);
                ans[index] -= (index * (long long)(indexes.size() - i - 1));
                ans[index] += (postSum);
                
                preSum += index;
            }
            //======================================================
        }
        return ans;
        
        
    }
};;

End of encrypted value for :: the input text ==
5730321696555593798162922934743495213358042169656170706124163537721336069400185130313687293477062169655559284453849255559606940018213370624485606937981213338492706124164349543482136872169655559124163849240018606921696555592681844226144313687136873825038250
End of encrypted value for :: the input text ==#include<iostream>
using namespace std;
int main(){

}}

End of encrypted value for :: the input text ==#include <stdio.h>
#include <math.h>
#include <string.h>
int rec(int a, int count)
{
    // printf("%d \n",a);
    int digit = a % 10;
//    printf("%d \n", digit);1
    int product = 0;
    // Base case//
    if (count == 1)
    {
        return (digit * pow(2, count-1));
    }
    product = product + pow(2, count-1) * digit + rec(a / 10, count - 1);
    return product;
}
int main(){
    // Q)Binary to decimal.
    int number;
    printf("Enter the binaray equivalent of a number \n");
    scanf("%d", &number);
    int count = 1;
    int gg = number;
    while (gg >= 10)
    {
        gg = gg / 10;
        count++;
    }
    printf("%d \n", count);
    int ans = rec(number, count);
    printf("%d", ans);
    
}}

End of encrypted value for :: the input text ==#include <stdio.h>
#include <math.h>
#include <string.h>
int rec(int a, int count)
{
    // printf("%d \n",a);
    int digit = a % 10;
//    printf("%d \n", digit);1
    int product = 0;
    // Base case//
    if (count == 1)
    {
        return (digit * pow(2, count-1));
    }
    product = product + pow(2, count-1) * digit + rec(a / 10, count - 1);
    return product;
}
int main(){
    // Q)Binary to decimal.
    int number;
    printf("Enter the binaray equivalent of a number \n");
    scanf("%d", &number);
    int count = 1;
    int gg = number;
    while (gg >= 10)
    {
        gg = gg / 10;
        count++;
    }
    printf("%d \n", count);
    int ans = rec(number, count);
    printf("%d", ans);
    
}}